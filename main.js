var K=Object.create,x=Object.defineProperty,q=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty,W=Object.getOwnPropertyNames,J=Object.getOwnPropertyDescriptor;var U=r=>x(r,"__esModule",{value:!0});var Q=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of W(e))!B.call(r,s)&&s!=="default"&&x(r,s,{get:()=>e[s],enumerable:!(t=J(e,s))||t.enumerable});return r},u=r=>r&&r.__esModule?r:Q(U(x(r!=null?K(q(r)):{},"default",{value:r,enumerable:!0})),r);var P=u(require("path"));var h=r=>`[${r}m`,b={bold:h("1"),black:h("30"),red:h("31"),green:h("32"),yellow:h("33"),blue:h("34"),magenta:h("35"),cyan:h("36"),white:h("37"),gray:h("90"),bgBlack:h("40"),bgRed:h("41"),bgGreen:h("42"),bgYellow:h("43"),bgBlue:h("44"),bgMagenta:h("45"),bgCyan:h("46"),bgWhite:h("47"),bgGray:h("100"),reset:h("0")};function z(r){return r.endsWith(b.reset)?r:`${r}${b.reset}`}var o=Object.keys(b).reduce((r,e)=>({...r,[e]:t=>z(`${b[e]}${t}`)}),{});var m="\u2665\u2666\u2663\u2660".split(""),k;(function(r){r[r.Heart=0]="Heart",r[r.Diamonds=1]="Diamonds",r[r.Clubs=2]="Clubs",r[r.Spades=3]="Spades"})(k||(k={}));var g=["2","3","4","5","6","7","8","9","10","J","Q","K","A"],p;(function(r){r[r.Two=0]="Two",r[r.Three=1]="Three",r[r.Four=2]="Four",r[r.Five=3]="Five",r[r.Six=4]="Six",r[r.Seven=5]="Seven",r[r.Eight=6]="Eight",r[r.Nine=7]="Nine",r[r.Ten=8]="Ten",r[r.Jack=9]="Jack",r[r.Queen=10]="Queen",r[r.King=11]="King",r[r.Ace=12]="Ace"})(p||(p={}));var f=class{constructor(e,t){if(typeof e=="string"){let s=m.reduce((c,y)=>e.indexOf(y)>c?e.indexOf(y):c,-1);if(s<0||s>=m.length)throw new Error(`Carta ${e} \xE9 inv\xE1lida: n\xE3o h\xE1 naipe.`);let a=e.substring(0,s),i=e.substring(s);if(this._value=g.findIndex(c=>c===a),this._suit=m.findIndex(c=>c===i),this._value<0||this._value>=g.length)throw new Error(`Carta ${e} \xE9 inv\xE1lida: valor inexistente.`)}else{if(t===void 0)throw new Error("Carta sem naipe associado.");this._value=e,this._suit=t}}get value(){return this._value}get suit(){return this._suit}get str(){return g[this._value]+m[this._suit]}toString(){let e=o.black(g[this._value]),t=this._suit<2?o.red(m[this._suit]):o.black(m[this._suit]);return o.bgWhite(e)+o.bgWhite(t)}};function T(){let r=new l;for(let e=0;e<m.length;e++)for(let t=0;t<g.length;t++)r.push(new f(t,e));return r.shuffle(),r.shuffle(),r}var l=class{constructor(e=[]){this.cards=e}get length(){return this.cards.length}shuffle(){for(let e=this.cards.length-1;e>0;e--){let t=Math.floor(Math.random()*(e+1));[this.cards[e],this.cards[t]]=[this.cards[t],this.cards[e]]}}sort(){this.cards.sort((e,t)=>e.suit!=t.suit?e.suit-t.suit:e.value-t.value)}get str(){return`[ ${this.cards.map(e=>e.str).join(" ")} ]`}toString(){return`[ ${this.cards.join(" ")} ]`}get top(){return this.cards[this.cards.length-1]}pop(){return this.cards.pop()}push(e){e!==void 0&&this.cards.push(e)}pushCards(e){e.forEach(t=>this.cards.push(t))}indexOf(e){return this.cards.findIndex(t=>t.value===e.value&&t.suit===e.suit)}has(e){return this.indexOf(e)>=0}hasAll(e){return e.every(t=>this.has(t))}remove(e){let t=this.indexOf(e);if(t<0)throw new Error(`INVALID ACTION. Player doesn't have card ${e}.`);this.cards.splice(t,1)}removeCards(e){e.forEach(t=>this.remove(t))}clear(){this.cards=[]}merge(e){for(;e.length>0;)this.push(e.pop());return this.shuffle(),this}isMeld(){if(this.cards.length<3)return!1;let e=[],t=[],s=[];this.cards.forEach(i=>{i.value===12?e.push(i):i.value===0?s.push(i):t.push(i)}),t.sort((i,c)=>i.suit!=c.suit?i.suit-c.suit:i.value-c.value);let a=t[0].suit;if(s.length>2)return!1;if(s.length===2){if(s[0].suit!==a&&s[1].suit!==a)return!1;let i=s[0].suit===a?0:1;t.unshift(s.splice(i,1)[0])}if(e.length>2)return!1;e.length===2&&(t.unshift(e.shift()),t.push(e.pop()));for(let i=1;i<t.length;i++){if(a!==t[i].suit)return!1;let c=t[i].value-t[i-1].value;if(c===0||c>2)return!1;if(c===2){if(s.length===0)return!1;t.splice(i,0,s.shift());break}}if(e.length===1)if(t[0].value===0)t.unshift(e.pop());else if(t[t.length-1].value===11)t.push(e.pop());else if(s.length===1)t[0].value===1?(t.unshift(s.pop()),t.unshift(e.pop())):t[t.length-1].value===10&&(t.push(s.pop()),t.push(e.pop()));else return!1;return s.length===1&&t.unshift(s.pop()),this.cards=t,!0}};var w=class{constructor(e=1){this.melds=[],this.playersHands=[new l],e==2&&this.playersHands.push(new l)}getHand(e=0){return this.playersHands[e]}};var n;(function(r){r.SETUP="Configura\xE7\xE3o inv\xE1lida.",r.ACTION="A\xE7\xE3o inv\xE1lida.",r.FORMAT="Formato de mensagem inv\xE1lido.",r.CARD="Carta inv\xE1lida.",r.DECK="Sequ\xEAncia de cartas inv\xE1lida.",r.MELD="Jogo inv\xE1lido."})(n||(n={}));var d=console.log,A=class{constructor(e){this.players=e;e.length!==2&&e.length!==4&&this.fail(n.SETUP,"O jogo deve ter dois ou quatro jogadores"),this.discardPile=new l,this.stock=T().merge(T()),this.pot=[new l,new l],this.playersPerTeam=e.length/2,this.team0=new w(this.playersPerTeam),this.team1=new w(this.playersPerTeam);for(let t=0;t<11;t++)for(let s=0;s<this.playersPerTeam;s++)this.team0.getHand(s).push(this.stock.pop()),this.team1.getHand(s).push(this.stock.pop());this.discardPile.push(this.stock.pop()),this.playerIndex=0,this.playerIndex=Math.floor(Math.random()*2*this.playersPerTeam)}initialSetup(){d(`O jogo come\xE7a com o jogador ${this.currentPlayerName}.`),d(`A pilha de descarte come\xE7a inicialmente com a carta ${this.discardPile.top}.`);let e=this.players.reduce((t,s)=>t+s.id+" ","").trimEnd();this.players.forEach((t,s)=>{this.send(e,t),this.send(t.id,t),this.send(this.getHand(s).str,t),this.send(this.discardPile.top.str,t)})}closeGame(){this.players.forEach(e=>e.halt()),process.exit()}gameOver(e){d(e),this.closeGame()}async run(){for(;;)this.broadcast(this.currentPlayer.id),await this.firstMove(),await this.secondMove(),this.playerIndex=(this.playerIndex+1)%this.players.length}async firstMove(){let{action:e,args:t}=await this.receiveAction();e==="GET_STOCK"?this.getStock():e==="GET_DISCARD"?this.getDiscard(t):this.fail(n.ACTION,`A primeira a\xE7\xE3o deve ser puxar uma carta do monte (GET_STOCK) ou do lixo (GET_DISCARD) e foi enviado ${o.yellow(e)}.`)}async secondMove(){let e;do{switch(e=await this.receiveAction(),e.action){case"MELD_NEW":this.createMeld(e.args);break;case"MELD_JOIN":this.joinMeld(e.args);break;case"DISCARD":this.discard(e.args);break;default:this.fail(n.ACTION,`Poss\xEDveis a\xE7\xF5es: MELD_NEW, MELD_JOIN ou DISCARD. A a\xE7\xE3o ${e.action} n\xE3o \xE9 poss\xEDvel.`);break}this.currentHand.cards.length===0&&this.gameOver(`Jogador ${this.currentPlayerName} bateu.`)}while(e.action!=="DISCARD")}getStock(){let e=this.stock.pop();e?(this.currentHand.push(e),this.send(e.str),this.broadcastNonCurrent("GET_STOCK"),d(`${this.currentPlayerName} puxou uma carta do deque de compra.`)):this.gameOver("N\xE3o h\xE1 mais cartas para puxar. O jogo terminou.")}getDiscard(e){e.length<2&&this.fail(n.DECK,"\xC9 necess\xE1rio pelo menos duas cartas para se juntar com o topo do lixo.");let t;try{t=e.map(i=>new f(i))}catch(i){this.fail(n.CARD,i)}let s=this.discardPile.pop(),a=new l([s,...t]);this.currentHand.hasAll(t)===!1?this.fail(n.DECK,"Tentativa de forma jogo com cartas que n\xE3o est\xE3o na m\xE3o."):a.isMeld()?(this.currentTeam.melds.push(a),this.send(this.discardPile.str),this.broadcastNonCurrent(`GET_DISCARD [ ${e.join(" ")} ]`),this.currentHand.removeCards(t),this.currentHand.merge(this.discardPile),d(`${this.currentPlayerName} pegou o lixo e fez o jogo ${a}.`)):this.fail(n.MELD,`As cartas ${a} n\xE3o formam um jogo.`)}createMeld(e){let t;try{t=e.map(a=>new f(a))}catch(a){this.fail(n.CARD,a)}let s=new l(t);this.currentHand.hasAll(t)===!1?this.fail(n.DECK,"Tentativa de forma jogo com cartas que n\xE3o est\xE3o na m\xE3o."):s.isMeld()?(this.currentTeam.melds.push(s),this.currentHand.removeCards(t),this.broadcastNonCurrent(`MELD_NEW [ ${e.join(" ")} ]`),d(`${this.currentPlayerName} baixou o jogo ${s}.`)):this.fail(n.MELD,`As cartas ${s} n\xE3o formam um jogo.`)}joinMeld([e,...t]){let s=Number(e);(s<0||s>=this.currentTeam.melds.length)&&this.fail(n.FORMAT,`O identificador ${e} n\xE3o costa nos jogos da equipe.`),(t[0]!=="["||t[t.length-1]!=="]")&&this.fail(n.FORMAT,"As cartas a serem anexadas ao jogo devem estar entre [ ].");let a;try{a=t.slice(1,-1).map(c=>new f(c))}catch(c){this.fail(n.CARD,c)}let i=this.currentTeam.melds[s];i.pushCards(a),this.currentHand.hasAll(a)===!1?this.fail(n.DECK,"Tentativa de forma jogo com cartas que n\xE3o est\xE3o na m\xE3o."):i.isMeld()?(this.currentHand.removeCards(a),this.broadcastNonCurrent(`MELD_JOIN ${e} [ ${a.join(" ")} ]`),d(`${this.currentPlayerName} adicionou as cartas ${new l(a)} atualizando o jogo ${i}.`)):this.fail(n.MELD,`As cartas ${i} n\xE3o formam um jogo.`)}discard(e){e.length===0&&this.fail(n.FORMAT,"\xC9 necess\xE1rio informar a carta a ser descartada na a\xE7\xE3o DISCARD"),e.length>1&&this.fail(n.FORMAT,"A\xE7\xE3o DISCARD requer um \xFAnico par\xE2metro, a carta a ser descartada");try{let t=new f(e[0]);this.currentHand.has(t)?(this.currentHand.remove(t),this.discardPile.push(t),this.broadcastNonCurrent(`DISCARD ${t.str}`),d(`${this.currentPlayerName} descartou a carta ${t}.`)):this.fail(n.CARD,`O jogador n\xE3o possui a carta ${t}.`)}catch(t){this.fail(n.CARD,t)}}async receive(){return await this.currentPlayer.read()}async receiveAction(){let e=await this.receive(),[t,...s]=e.split(" ").filter(a=>a.length>0);return s[0]==="["&&s[s.length-1]==="]"&&(s=s.slice(1,-1)),{action:t,args:s}}send(e,t=this.currentPlayer){return t.write(e)}broadcast(e,t=this.players){t.forEach(s=>this.send(e,s))}broadcastNonCurrent(e){this.broadcast(e,this.players.filter(t=>t!=this.currentPlayer))}fail(e,t){d(`${this.currentPlayerName}: ${o.red(e)} ${t}`),this.closeGame()}getTeam(e){return e%2==0?this.team0:this.team1}get currentTeam(){return this.getTeam(this.playerIndex)}get oponentTeam(){return this.getTeam(this.playerIndex)===this.team0?this.team1:this.team0}get currentPlayerName(){return this.currentPlayer.color(this.currentPlayer.id)}get currentPlayer(){return this.players[this.playerIndex]}get currentHand(){return this.getHand(this.playerIndex)}getHand(e){return this.getTeam(e).getHand(e<2?0:1)}};var S=u(require("path")),H=u(require("child_process"));var I=u(require("child_process")),N=u(require("stream")),O=u(require("readline"));function E(r){let e=O.createInterface({input:r}),t=async function*(){for await(let s of e)yield s}();return async()=>(await t.next()).value}function R(r){let e=new N.Readable({read:()=>{}}),t=I.fork(r);return t.on("message",s=>e.push(s)),{process:t,read:E(e),write:s=>t.send(`${s}
`)}}var $=console.log,D=class{constructor(e,t){this.id=e;this.execName=t;this.proc=H.spawn(S.join(__dirname,t)),this.proc.on("error",s=>{$(o.red(`Erro na execu\xE7\xE3o do programa ${t}.`)),$(o.red(s)),this.halt()}),this.proc.stderr.on("data",s=>{let a=s.toString().replace(/\n/g,`
	`);$(o.red(`Bot ${e}:`)),$(o.red(`	${a}`))}),this._read=E(this.proc.stdout)}write(e){D.debug&&console.debug(`Enviando para ${this.id}: ${e}`),this.proc.stdin.write(`${e}
`)}async read(){let e=await this._read();return D.debug&&console.debug(`Recebido de ${this.id}: ${e}`),e}halt(){this.proc.kill("SIGINT")}},v=D;v.debug=!1;var M=u(require("path"));var C=class{constructor(e){this.id="user";this.child=R(M.join(__dirname,e))}write(e){this.child.write(`${e}`)}async read(){return await this.child.read()}halt(){this.child.process.kill("SIGINT")}};function G(r,e,t){let s=Math.floor((r-e.length)/2)-1,a=t.repeat(s),i=r-s-e.length-2,c=t.repeat(i),y=o.white(`${a} ${e} ${c}`);console.log(o.bgBlue(y))}function _(r=""){let e=80;console.log();let t=o.white("=".repeat(e)),s=o.bgBlue(t);Array.isArray(r)?(console.log(s),r.forEach(a=>G(e,a," ")),console.log(s)):r.length==0?console.log(s):G(e,r,"="),console.log()}var j=console.log,Y=[o.cyan,o.yellow,o.magenta,o.cyan];function L(){let r=P.basename(process.argv[0]),e=P.basename(process.argv[1]);_(["Buraco"]),j(`
    Neste jogo, bots competem entre si numa partida de Buraco simplificada.
    Pode-se colocar de 1 at\xE9 4 bots para competir, especificando o caminho de
    seus execut\xE1veis na linha de comando.
    Caso haja um n\xFAmero \xEDmpar de bots, o usu\xE1rio ser\xE1 um dos jogadores
    completando as equipes.
    `),j(`Uso: ${r} ${e} [-h] [-d] bot1 [bot2 [bot3 [bot4]]]`),j(`
    -h: (help) Explica os par\xE2metros de linha de comando (esta ajuda).
    -d: (debug) Imprime as trocas de mensagens entre o jogo e os bots.
    bot1, bot2...: caminho para os execut\xE1veis dos bots.
    `)}async function X(){let r=process.argv.slice(2).filter(s=>!s.startsWith("-")),e=[],t=r.length;if(t<1||t>4)L();else{t%2&&e.push(new C("user"));for(let s=0;s<t;s++){let a=r[s],i=`p${s+1}.${P.basename(a)}`;e.push(new v(i,a))}}return e.forEach((s,a)=>s.color=Y[a]),e}async function Z(){let r=await X();_(["BURACO",`Jogadores : ${r.map(t=>t.id).join(", ")}`]);let e=new A(r);try{e.initialSetup(),await e.run()}catch(t){console.error(t),r.forEach(s=>s.halt())}}process.argv.includes("-d")&&(v.debug=!0);process.argv.includes("-h")||process.argv.length<3?L():Z();
